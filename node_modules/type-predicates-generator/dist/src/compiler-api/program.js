"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchCompiler = exports.createProgram = void 0;
const path_1 = require("path");
const typescript_1 = require("typescript");
const createProgram = (tsConfigPath) => {
    const configFile = (0, typescript_1.readConfigFile)(tsConfigPath, typescript_1.sys.readFile);
    if (typeof configFile.error !== "undefined") {
        throw new Error(`Failed to load tsconfig: ${configFile.error}`);
    }
    const { options, fileNames } = (0, typescript_1.parseJsonConfigFileContent)(configFile.config, {
        fileExists: typescript_1.sys.fileExists,
        readFile: typescript_1.sys.readFile,
        readDirectory: typescript_1.sys.readDirectory,
        useCaseSensitiveFileNames: true,
    }, (0, path_1.resolve)(tsConfigPath, ".."));
    return (0, typescript_1.createProgram)({
        rootNames: fileNames,
        options,
    });
};
exports.createProgram = createProgram;
// const watcher = watchCompiler(...)
// watcher.getProgram().getProgram() => ts.Program
// watch しなくて良いときは createProgram から
function watchCompiler(tsConfigPath, watchFiles = [], onFileChanged, watchOption, reportDiagnostic, reportWatchStatus) {
    const createProgram = typescript_1.createEmitAndSemanticDiagnosticsBuilderProgram;
    const host = (0, typescript_1.createWatchCompilerHost)(tsConfigPath, {
        noEmit: true,
    }, typescript_1.sys, createProgram, reportDiagnostic, reportWatchStatus, watchOption);
    watchFiles.forEach((file) => {
        host.watchFile(file, onFileChanged);
    });
    return (0, typescript_1.createWatchProgram)(host);
}
exports.watchCompiler = watchCompiler;
