import type * as ts from "typescript";
export declare type TypeObject = PrimitiveTO | LiteralTO | SpecialTO | ArrayTO | TupleTO | ObjectTO | UnionTO | EnumTO | TypeParameterTO | UnknownTO | SkipTO;
declare type TypeNameTrait = {
    typeName: string;
};
export declare type PrimitiveTO = {
    __type: "PrimitiveTO";
    kind: "string" | "number" | "bigint" | "boolean";
};
export declare type SpecialTO = {
    __type: "SpecialTO";
    kind: "null" | "undefined" | "any" | "unknown" | "never" | "void" | "Date";
};
export declare type LiteralTO = {
    __type: "LiteralTO";
    value: unknown;
};
export declare type ArrayTO = TypeNameTrait & {
    __type: "ArrayTO";
    child: TypeObject;
};
export declare type TupleTO = TypeNameTrait & {
    __type: "TupleTO";
    items: TypeObject[];
};
export declare type ObjectTO = TypeNameTrait & {
    __type: "ObjectTO";
    tsType: ts.Type;
    getProps: () => {
        propName: string;
        type: TypeObject;
    }[];
};
export declare type UnionTO = TypeNameTrait & {
    __type: "UnionTO";
    unions: TypeObject[];
};
export declare type TypeParameterTO = {
    __type: "TypeParameterTO";
    name: string;
};
export declare type EnumTO = TypeNameTrait & {
    __type: "EnumTO";
    enums: {
        name: string;
        type: LiteralTO;
    }[];
};
export declare type SkipTO = {
    __type: "SkipTO";
};
export declare type UnknownTO = {
    __type: "UnknownTO";
    kind: "arrayT" | "prop" | "convert";
    typeText?: string;
};
export declare function primitive(kind: PrimitiveTO["kind"]): PrimitiveTO;
export declare function special(kind: SpecialTO["kind"]): SpecialTO;
export declare function skip(): SkipTO;
export {};
