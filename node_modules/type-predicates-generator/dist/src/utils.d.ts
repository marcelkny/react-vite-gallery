export declare type Result<S, T> = ResultOk<S> | ResultNg<T>;
export declare type ResultOk<T> = {
    __type: "ok";
    ok: T;
};
export declare type ResultNg<T> = {
    __type: "ng";
    ng: T;
};
export declare function isOk<T, E>(result: Result<T, E>): result is ResultOk<T>;
export declare function isNg<T, E>(result: Result<T, E>): result is ResultNg<E>;
export declare function ok<T>(value: T): ResultOk<T>;
export declare function ng<T>(value: T): ResultNg<T>;
declare type SwitchResolve<Arg, R> = (arg: Arg) => R;
declare type SwitchResult<T, R> = {
    case: <CaseR, Predicate = {}, Resolved = Omit<T, keyof Predicate> & Predicate>(isMatch: (target: T) => boolean, resolve: SwitchResolve<Resolved, CaseR>) => SwitchResult<T, R | CaseR>;
    default: <Default>(resolve: SwitchResolve<T, Default>) => R | Default;
    resolved?: R;
};
export declare const switchExpression: <T>(target: T) => SwitchResult<T, never>;
export {};
