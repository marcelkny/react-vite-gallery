/* tslint:disable */
/* eslint-disable */
/**
 * MKSERVERMASTER API (frontend)
 * Internal API for MK-Servermaster Board.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDashboardResponse,
  ApiErrorResponse,
  GalleryImagePageResponse,
  GalleryRequestCredentials,
  GalleryUploadDataCredentials,
  GalleryUploadDataResponse,
} from '../models/index';
import {
    ApiDashboardResponseFromJSON,
    ApiDashboardResponseToJSON,
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    GalleryImagePageResponseFromJSON,
    GalleryImagePageResponseToJSON,
    GalleryRequestCredentialsFromJSON,
    GalleryRequestCredentialsToJSON,
    GalleryUploadDataCredentialsFromJSON,
    GalleryUploadDataCredentialsToJSON,
    GalleryUploadDataResponseFromJSON,
    GalleryUploadDataResponseToJSON,
} from '../models/index';

export interface GetGalleryImagesRequest {
    GalleryRequestCredentials: GalleryRequestCredentials;
}

export interface GetGalleryUploadDataRequest {
    GalleryUploadDataCredentials: GalleryUploadDataCredentials;
}

export interface UploadImagesToGalleryRequest {
    user_id: string;
    content_level: number;
    keys: Array<string>;
    files: Array<Blob>;
}

/**
 * 
 */
export class GalleryApi extends runtime.BaseAPI {

    /**
     * update customer credentials
     */
    async getGalleryImagesRaw(requestParameters: GetGalleryImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GalleryImagePageResponse>> {
        if (requestParameters.GalleryRequestCredentials === null || requestParameters.GalleryRequestCredentials === undefined) {
            throw new runtime.RequiredError('GalleryRequestCredentials','Required parameter requestParameters.GalleryRequestCredentials was null or undefined when calling getGalleryImages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Client"] = await this.configuration.apiKey("Client"); // clientHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ext/gallery`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GalleryRequestCredentialsToJSON(requestParameters.GalleryRequestCredentials),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GalleryImagePageResponseFromJSON(jsonValue));
    }

    /**
     * update customer credentials
     */
    async getGalleryImages(requestParameters: GetGalleryImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GalleryImagePageResponse> {
        const response = await this.getGalleryImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get data necessary for upload form
     */
    async getGalleryUploadDataRaw(requestParameters: GetGalleryUploadDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GalleryUploadDataResponse>> {
        if (requestParameters.GalleryUploadDataCredentials === null || requestParameters.GalleryUploadDataCredentials === undefined) {
            throw new runtime.RequiredError('GalleryUploadDataCredentials','Required parameter requestParameters.GalleryUploadDataCredentials was null or undefined when calling getGalleryUploadData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Client"] = await this.configuration.apiKey("Client"); // clientHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ext/gallery/upload/data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GalleryUploadDataCredentialsToJSON(requestParameters.GalleryUploadDataCredentials),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GalleryUploadDataResponseFromJSON(jsonValue));
    }

    /**
     * get data necessary for upload form
     */
    async getGalleryUploadData(requestParameters: GetGalleryUploadDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GalleryUploadDataResponse> {
        const response = await this.getGalleryUploadDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * upload images to gallery
     */
    async uploadImagesToGalleryRaw(requestParameters: UploadImagesToGalleryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDashboardResponse>> {
        if (requestParameters.user_id === null || requestParameters.user_id === undefined) {
            throw new runtime.RequiredError('user_id','Required parameter requestParameters.user_id was null or undefined when calling uploadImagesToGallery.');
        }

        if (requestParameters.content_level === null || requestParameters.content_level === undefined) {
            throw new runtime.RequiredError('content_level','Required parameter requestParameters.content_level was null or undefined when calling uploadImagesToGallery.');
        }

        if (requestParameters.keys === null || requestParameters.keys === undefined) {
            throw new runtime.RequiredError('keys','Required parameter requestParameters.keys was null or undefined when calling uploadImagesToGallery.');
        }

        if (requestParameters.files === null || requestParameters.files === undefined) {
            throw new runtime.RequiredError('files','Required parameter requestParameters.files was null or undefined when calling uploadImagesToGallery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Client"] = await this.configuration.apiKey("Client"); // clientHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.user_id !== undefined) {
            formParams.append('user_id', requestParameters.user_id as any);
        }

        if (requestParameters.content_level !== undefined) {
            formParams.append('content_level', requestParameters.content_level as any);
        }

        if (requestParameters.keys) {
            formParams.append('keys', requestParameters.keys.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters.files) {
            requestParameters.files.forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        const response = await this.request({
            path: `/ext/gallery/upload/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiDashboardResponseFromJSON(jsonValue));
    }

    /**
     * upload images to gallery
     */
    async uploadImagesToGallery(requestParameters: UploadImagesToGalleryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDashboardResponse> {
        const response = await this.uploadImagesToGalleryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
