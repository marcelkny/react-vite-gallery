/* tslint:disable */
/* eslint-disable */
/**
 * MKSERVERMASTER API (frontend)
 * Internal API for MK-Servermaster Board.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountCredentials,
  AccountUpdateCredentials,
  ApiDashboardResponse,
  ApiErrorResponse,
  ApiLoginResponse,
  ApiLogoutResponse,
  SettingsPageContentRequest,
  SettingsPageContentResponse,
} from '../models/index';
import {
    AccountCredentialsFromJSON,
    AccountCredentialsToJSON,
    AccountUpdateCredentialsFromJSON,
    AccountUpdateCredentialsToJSON,
    ApiDashboardResponseFromJSON,
    ApiDashboardResponseToJSON,
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    ApiLoginResponseFromJSON,
    ApiLoginResponseToJSON,
    ApiLogoutResponseFromJSON,
    ApiLogoutResponseToJSON,
    SettingsPageContentRequestFromJSON,
    SettingsPageContentRequestToJSON,
    SettingsPageContentResponseFromJSON,
    SettingsPageContentResponseToJSON,
} from '../models/index';

export interface GetSettingsContentsRequest {
    SettingsPageContentRequest: SettingsPageContentRequest;
}

export interface LogintoAccountRequest {
    AccountCredentials: AccountCredentials;
}

export interface UpdateCredentialsRequest {
    AccountUpdateCredentials: AccountUpdateCredentials;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * get content for settings page
     */
    async getSettingsContentsRaw(requestParameters: GetSettingsContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SettingsPageContentResponse>> {
        if (requestParameters.SettingsPageContentRequest === null || requestParameters.SettingsPageContentRequest === undefined) {
            throw new runtime.RequiredError('SettingsPageContentRequest','Required parameter requestParameters.SettingsPageContentRequest was null or undefined when calling getSettingsContents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Client"] = await this.configuration.apiKey("Client"); // clientHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ext/auth/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsPageContentRequestToJSON(requestParameters.SettingsPageContentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsPageContentResponseFromJSON(jsonValue));
    }

    /**
     * get content for settings page
     */
    async getSettingsContents(requestParameters: GetSettingsContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SettingsPageContentResponse> {
        const response = await this.getSettingsContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * account login
     */
    async logintoAccountRaw(requestParameters: LogintoAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiLoginResponse>> {
        if (requestParameters.AccountCredentials === null || requestParameters.AccountCredentials === undefined) {
            throw new runtime.RequiredError('AccountCredentials','Required parameter requestParameters.AccountCredentials was null or undefined when calling logintoAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ext/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountCredentialsToJSON(requestParameters.AccountCredentials),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiLoginResponseFromJSON(jsonValue));
    }

    /**
     * account login
     */
    async logintoAccount(requestParameters: LogintoAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiLoginResponse> {
        const response = await this.logintoAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * account logout
     */
    async logoutofAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiLogoutResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Client"] = await this.configuration.apiKey("Client"); // clientHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ext/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiLogoutResponseFromJSON(jsonValue));
    }

    /**
     * account logout
     */
    async logoutofAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiLogoutResponse> {
        const response = await this.logoutofAccountRaw(initOverrides);
        return await response.value();
    }

    /**
     * update customer credentials
     */
    async updateCredentialsRaw(requestParameters: UpdateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDashboardResponse>> {
        if (requestParameters.AccountUpdateCredentials === null || requestParameters.AccountUpdateCredentials === undefined) {
            throw new runtime.RequiredError('AccountUpdateCredentials','Required parameter requestParameters.AccountUpdateCredentials was null or undefined when calling updateCredentials.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Client"] = await this.configuration.apiKey("Client"); // clientHeader authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ext/auth/updateCredentials`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountUpdateCredentialsToJSON(requestParameters.AccountUpdateCredentials),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiDashboardResponseFromJSON(jsonValue));
    }

    /**
     * update customer credentials
     */
    async updateCredentials(requestParameters: UpdateCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDashboardResponse> {
        const response = await this.updateCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
